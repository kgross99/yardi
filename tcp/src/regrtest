#!/bin/bash

# function to compare old and new versions of a file.
# if different, prints difference.
function compOldNew {
    cmp -s $t/$1.old $t/$1.new
    if [ $? -gt 0 ]
    then
      echo ${t##*/} $2 changed >&2
      diff $t/$1.new $t/$1.old >&2
    fi
}

rm -f *.class
# keep count of times actual output does not match
# expected output for the exit code.
error_count=0
for t in $PWD/tc*
do
  if [ -d $t ]
  then
    javac ${t##*/}recv.java
    javac ${t##*/}send.java
    nohup java ${t##*/}recv $(cat $t/inp.recv.new) \
      > $t/out.recv.new 2> $t/err.recv.new < /dev/null &
    java ${t##*/}send $(cat $t/inp.send.new) \
      > $t/out.send.new 2> $t/err.send.new < /dev/null

    # compare actual with expected output for receiver.
    # if different, put message on stderr, increment error count
    cmp -s $t/exp.recv.new $t/out.recv.new
    if [ $? -gt 0 ]
    then
      echo ${t##*/}: recv exp/out cmp failed >&2
      let error_count+=1
    fi

    # compare actual with expected output for sender. 
    # if different, put message on stderr, increment error count
    cmp -s $t/exp.send.new $t/out.send.new
    if [ $? -gt 0 ]
    then
      echo ${t##*/}: send exp/out cmp failed >&2
      let error_count+=1
    fi

    # compare new and old files.
    compOldNew err.recv error_recv
    compOldNew err.send error_send
    compOldNew exp.recv expected_recv
    compOldNew exp.send expected_send
    compOldNew inp.recv input_recv
    compOldNew inp.send input_send
    compOldNew out.recv output_recv
    compOldNew out.send output_send
  #else
  fi
done

if [ $error_count -gt 0 ]
then
    # echo error count to stderr
    echo "Number of errors: " $error_count >&2
fi

# error count is the exit code
exit $error_count
