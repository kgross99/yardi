
/**

@mainpage

CS453 Project 1 my dash

@author kgross


<pre>


README              This file
doxygen-config      Sample config file for doxygen
loop.c            Simple infinite loop program that doesn't use significant resources
Makefile            Build file for this mydash
TestCases           An list of test cases
test-harness/       An example (incomplete) test harness for the dash project
test-readline.c     Example file on how to use auto completion with readline library
valgrind.supp       Example suppression file for valgrind to avoid lots of spurious error messages about the readline library
mydash.c	    The main mydash source code file
/libsrc		    Folder containing the linked list that is used as a library for this project.

Design 
-------
This project was done totally in the mydash.c file.  It uses the readlines library to allow tab command completion and command history, it also uses the doubly linked list I created from project 0 as a library to hold the job information.

Basic design of the program, the function expand_command takes the command line and determines what needs to be done with it.  It uses the background flag to 
control if it has to be run in the background and added to the jobs list.

The check_for_background funtion looks for the ampersand at the end of the line to tell if it needs to be run in the background.

Test cases with my additions can be found in the TestCases file.

The biggest challenges of this assignment had to do with a simple problem of job id's to use.  Only jobs that are background jobs are assigned an id, and the id to be assigned is the lowest id number that does not have any used id's above it in the list.  To do this I ended up modifying my linked list and object classes slightly.  The object was modifed to hold the job id in it so it is stored with the rest of the job.   I added a function to the linked list to give me the next available job id.  To do this is iterates through all jobs and returns 1 number higher than the highest job id that is still in the list.  I could not figure out any other way to do this simpily since I had already setup the progrm to use the pid as the key since that will be unique to the system, where the jobid could since it is generated by mydash not be unique to all processes.

The other major challenge has been the svn-version number.  I can not get the svn_version method to be compiled and linked into the program so I can access it with the -v command yet.






Running
-------
Run the program by running:
$ ./mydash





Valgrind
--------


Use valgrind as follows

valgrind --leak-check=yes --suppressions=valgrind.supp ./mydash

You will need the suppression file valgrind.supp that suppresses errors from
the readline library so you can focus on issues emanating from your code.

Memory errors:  Having some major problems with memory errors.  When I run valgrind, when the first command is proccessed it has lots of errors being printed out, most via my trim function.  I have done a bunch of searches and have not come up with a solution to this issue.   But the good part is after I exit the problem it does not report any memory leaks.

Documentation
-------------

Generate documentation using doxygen tool. Use
doxygen doxygen-config


