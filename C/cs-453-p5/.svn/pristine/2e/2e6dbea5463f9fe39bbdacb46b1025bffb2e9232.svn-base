\hypertarget{mylib_2List_8c}{}\section{mylib/\+List.c File Reference}
\label{mylib_2List_8c}\index{mylib/\+List.\+c@{mylib/\+List.\+c}}
{\ttfamily \#include $<$stdio.\+h$>$}\\*
{\ttfamily \#include $<$stdlib.\+h$>$}\\*
{\ttfamily \#include \char`\"{}common.\+h\char`\"{}}\\*
{\ttfamily \#include \char`\"{}List.\+h\char`\"{}}\\*
{\ttfamily \#include \char`\"{}Word\+Obj.\+h\char`\"{}}\\*
\subsection*{Functions}
\begin{DoxyCompactItemize}
\item 
static void \hyperlink{mylib_2List_8c_a371ecec3cccc55211c0f166be8d8e0d0}{print} (const \hyperlink{include_2Node_8h_aa6eec21621b8638e350fd0ec238a9715}{Node\+Ptr} \hyperlink{structnode}{node}, char $\ast$($\ast$\hyperlink{mylib_2Object_8h_a6dfc43d9b4cbc992846435ee727f3454}{to\+String})(const void $\ast$))
\item 
\hyperlink{include_2List_8h_a861ccde58c51198da7548ab818f1bbdd}{List\+Ptr} \hyperlink{mylib_2List_8c_a02825f4dc224e373c7102c5dfa0de395}{create\+List} (int($\ast$\hyperlink{mylib_2Object_8h_a5cadf14267575f2ee8f0cf226af7a7aa}{compare\+To})(const void $\ast$), char $\ast$($\ast$\hyperlink{mylib_2Object_8h_a6dfc43d9b4cbc992846435ee727f3454}{to\+String})(const void $\ast$), void($\ast$\hyperlink{mylib_2Object_8h_ad224f50cb1912941fc68947b6fc03219}{free\+Object})(const void $\ast$))
\item 
void \hyperlink{mylib_2List_8c_ae84ae05d522c39df123f60bca2b27dea}{free\+List} (\hyperlink{include_2List_8h_a861ccde58c51198da7548ab818f1bbdd}{List\+Ptr} L)
\begin{DoxyCompactList}\small\item\em Frees all elements of the given list and the {\ttfamily List\+Ptr} itself. \end{DoxyCompactList}\item 
int \hyperlink{mylib_2List_8c_ab3d2a46b4fedd016c3a03c297b89d8f7}{get\+Size} (\hyperlink{include_2List_8h_a861ccde58c51198da7548ab818f1bbdd}{List\+Ptr} L)
\begin{DoxyCompactList}\small\item\em Returns the size of the given list. \end{DoxyCompactList}\item 
\hyperlink{include_2common_8h_a127a96e09108f503cca20256eaa4ddff}{Boolean} \hyperlink{mylib_2List_8c_a43f64a19c9aafabbd572908151547fe2}{is\+Empty} (\hyperlink{include_2List_8h_a861ccde58c51198da7548ab818f1bbdd}{List\+Ptr} L)
\begin{DoxyCompactList}\small\item\em Checks if the list is empty. \end{DoxyCompactList}\item 
void \hyperlink{mylib_2List_8c_a476cc4f9f3eac74de69922b337d3f5d4}{add\+At\+Front} (\hyperlink{include_2List_8h_a861ccde58c51198da7548ab818f1bbdd}{List\+Ptr} \hyperlink{structlist}{list}, \hyperlink{include_2Node_8h_aa6eec21621b8638e350fd0ec238a9715}{Node\+Ptr} \hyperlink{structnode}{node})
\begin{DoxyCompactList}\small\item\em Adds a node to the front of the list. \end{DoxyCompactList}\item 
void \hyperlink{mylib_2List_8c_a194ecb3333d63b8d9b65c9a1bc12e395}{add\+At\+Rear} (\hyperlink{include_2List_8h_a861ccde58c51198da7548ab818f1bbdd}{List\+Ptr} \hyperlink{structlist}{list}, \hyperlink{include_2Node_8h_aa6eec21621b8638e350fd0ec238a9715}{Node\+Ptr} \hyperlink{structnode}{node})
\begin{DoxyCompactList}\small\item\em Adds a node to the rear of the list. \end{DoxyCompactList}\item 
\hyperlink{include_2Node_8h_aa6eec21621b8638e350fd0ec238a9715}{Node\+Ptr} \hyperlink{mylib_2List_8c_a21ea604b2c4b634c83152e4de532ca33}{remove\+Front} (\hyperlink{include_2List_8h_a861ccde58c51198da7548ab818f1bbdd}{List\+Ptr} \hyperlink{structlist}{list})
\begin{DoxyCompactList}\small\item\em Removes the node from the front of the list (the head node) and returns a pointer to the node that was removed. \end{DoxyCompactList}\item 
\hyperlink{include_2Node_8h_aa6eec21621b8638e350fd0ec238a9715}{Node\+Ptr} \hyperlink{mylib_2List_8c_a79b7613686651c0fdd9ba75859ab1cf4}{remove\+Rear} (\hyperlink{include_2List_8h_a861ccde58c51198da7548ab818f1bbdd}{List\+Ptr} \hyperlink{structlist}{list})
\begin{DoxyCompactList}\small\item\em Removes the node from the rear of the list (the tail node) and returns a pointer to the node that was removed. \end{DoxyCompactList}\item 
\hyperlink{include_2Node_8h_aa6eec21621b8638e350fd0ec238a9715}{Node\+Ptr} \hyperlink{mylib_2List_8c_a7759b3a50942a4d588c73757ce2e15bf}{remove\+Node} (\hyperlink{include_2List_8h_a861ccde58c51198da7548ab818f1bbdd}{List\+Ptr} \hyperlink{structlist}{list}, \hyperlink{include_2Node_8h_aa6eec21621b8638e350fd0ec238a9715}{Node\+Ptr} \hyperlink{structnode}{node})
\begin{DoxyCompactList}\small\item\em Removes the node pointed to by the given node pointer from the list and returns the pointer to it. \end{DoxyCompactList}\item 
\hyperlink{include_2Node_8h_aa6eec21621b8638e350fd0ec238a9715}{Node\+Ptr} \hyperlink{mylib_2List_8c_a0034106dcaa9abb1f1ecc2de47ce4622}{search} (\hyperlink{include_2List_8h_a861ccde58c51198da7548ab818f1bbdd}{List\+Ptr} \hyperlink{structlist}{list}, const void $\ast$o)
\begin{DoxyCompactList}\small\item\em Searches the list for a node with the given key and returns the pointer to the found node. \end{DoxyCompactList}\item 
void \hyperlink{mylib_2List_8c_a98ef2e3e4d692de272b451a11015fdad}{reverse\+List} (\hyperlink{include_2List_8h_a861ccde58c51198da7548ab818f1bbdd}{List\+Ptr} L)
\begin{DoxyCompactList}\small\item\em Reverses the order of the given list. \end{DoxyCompactList}\item 
void \hyperlink{mylib_2List_8c_ae06d135fd1ae5ca0754ef38cec8889d5}{print\+List} (const \hyperlink{include_2List_8h_a861ccde58c51198da7548ab818f1bbdd}{List\+Ptr} \hyperlink{structlist}{list})
\begin{DoxyCompactList}\small\item\em Prints the list. \end{DoxyCompactList}\end{DoxyCompactItemize}
\subsection*{Variables}
\begin{DoxyCompactItemize}
\item 
\hyperlink{include_2List_8h_a861ccde58c51198da7548ab818f1bbdd}{List\+Ptr} \hyperlink{mylib_2List_8c_acba5f084de2678df16ca48e737ef7780}{templist}
\item 
Word\+Obj\+Ptr \hyperlink{mylib_2List_8c_a281bbb03dfa5d9cc744f9b412db23f38}{temp\+Job}
\end{DoxyCompactItemize}


\subsection{Function Documentation}
\hypertarget{mylib_2List_8c_a476cc4f9f3eac74de69922b337d3f5d4}{}\index{mylib/\+List.\+c@{mylib/\+List.\+c}!add\+At\+Front@{add\+At\+Front}}
\index{add\+At\+Front@{add\+At\+Front}!mylib/\+List.\+c@{mylib/\+List.\+c}}
\subsubsection[{add\+At\+Front}]{\setlength{\rightskip}{0pt plus 5cm}void add\+At\+Front (
\begin{DoxyParamCaption}
\item[{{\bf List\+Ptr}}]{list, }
\item[{{\bf Node\+Ptr}}]{node}
\end{DoxyParamCaption}
)}\label{mylib_2List_8c_a476cc4f9f3eac74de69922b337d3f5d4}


Adds a node to the front of the list. 

After this method is called, the given node will be the head of the list. (Node must be allocated before it is passed to this function.) If the list and/or node are N\+U\+L\+L, the function will do nothing and return.


\begin{DoxyParams}{Parameters}
{\em list} & a pointer to a {\ttfamily List}. \\
\hline
{\em node} & a pointer to the node to add.\\
\hline
\end{DoxyParams}
Adds a node to the front of the list.

Adds a node to the front of a list 
\begin{DoxyParams}{Parameters}
{\em list} & a pointer to the list being added too \\
\hline
{\em node} & a pointer to the node being added \\
\hline
\end{DoxyParams}
\hypertarget{mylib_2List_8c_a194ecb3333d63b8d9b65c9a1bc12e395}{}\index{mylib/\+List.\+c@{mylib/\+List.\+c}!add\+At\+Rear@{add\+At\+Rear}}
\index{add\+At\+Rear@{add\+At\+Rear}!mylib/\+List.\+c@{mylib/\+List.\+c}}
\subsubsection[{add\+At\+Rear}]{\setlength{\rightskip}{0pt plus 5cm}void add\+At\+Rear (
\begin{DoxyParamCaption}
\item[{{\bf List\+Ptr}}]{list, }
\item[{{\bf Node\+Ptr}}]{node}
\end{DoxyParamCaption}
)}\label{mylib_2List_8c_a194ecb3333d63b8d9b65c9a1bc12e395}


Adds a node to the rear of the list. 

After this method is called, the given node will be the tail of the list. (Node must be allocated before it is passed to this function.) If the list and/or node are N\+U\+L\+L, the function will do nothing and return.


\begin{DoxyParams}{Parameters}
{\em list} & a pointer to a {\ttfamily List}. \\
\hline
{\em node} & a pointer to the node to add.\\
\hline
\end{DoxyParams}
Adds a node to the rear of the list.

Adds a node to the rear of a list 
\begin{DoxyParams}{Parameters}
{\em list} & a pointer to the list being added too \\
\hline
{\em node} & a pointer to the node being added \\
\hline
\end{DoxyParams}
\hypertarget{mylib_2List_8c_a02825f4dc224e373c7102c5dfa0de395}{}\index{mylib/\+List.\+c@{mylib/\+List.\+c}!create\+List@{create\+List}}
\index{create\+List@{create\+List}!mylib/\+List.\+c@{mylib/\+List.\+c}}
\subsubsection[{create\+List}]{\setlength{\rightskip}{0pt plus 5cm}{\bf List\+Ptr} create\+List (
\begin{DoxyParamCaption}
\item[{int($\ast$)(const void $\ast$)}]{compare\+To, }
\item[{char $\ast$($\ast$)(const void $\ast$)}]{to\+String, }
\item[{void($\ast$)(const void $\ast$)}]{free\+Object}
\end{DoxyParamCaption}
)}\label{mylib_2List_8c_a02825f4dc224e373c7102c5dfa0de395}
\hypertarget{mylib_2List_8c_ae84ae05d522c39df123f60bca2b27dea}{}\index{mylib/\+List.\+c@{mylib/\+List.\+c}!free\+List@{free\+List}}
\index{free\+List@{free\+List}!mylib/\+List.\+c@{mylib/\+List.\+c}}
\subsubsection[{free\+List}]{\setlength{\rightskip}{0pt plus 5cm}void free\+List (
\begin{DoxyParamCaption}
\item[{{\bf List\+Ptr}}]{L}
\end{DoxyParamCaption}
)}\label{mylib_2List_8c_ae84ae05d522c39df123f60bca2b27dea}


Frees all elements of the given list and the {\ttfamily List\+Ptr} itself. 

Does nothing if L is {\ttfamily N\+U\+L\+L}.


\begin{DoxyParams}{Parameters}
{\em L} & a pointer to a {\ttfamily List}.\\
\hline
\end{DoxyParams}
Frees all elements of the given list and the {\ttfamily List\+Ptr} itself.

Frees each individual node and then frees the list\textquotesingle{}s allocated memory. 
\begin{DoxyParams}{Parameters}
{\em list} & a pointer to the list to be deallocated \\
\hline
\end{DoxyParams}
\hypertarget{mylib_2List_8c_ab3d2a46b4fedd016c3a03c297b89d8f7}{}\index{mylib/\+List.\+c@{mylib/\+List.\+c}!get\+Size@{get\+Size}}
\index{get\+Size@{get\+Size}!mylib/\+List.\+c@{mylib/\+List.\+c}}
\subsubsection[{get\+Size}]{\setlength{\rightskip}{0pt plus 5cm}int get\+Size (
\begin{DoxyParamCaption}
\item[{{\bf List\+Ptr}}]{L}
\end{DoxyParamCaption}
)}\label{mylib_2List_8c_ab3d2a46b4fedd016c3a03c297b89d8f7}


Returns the size of the given list. 


\begin{DoxyParams}{Parameters}
{\em L} & a pointer to a {\ttfamily List}. \\
\hline
\end{DoxyParams}
\begin{DoxyReturn}{Returns}
The current size of the list.
\end{DoxyReturn}
Returns the size of the given list.

Returns the current size of the list 
\begin{DoxyParams}{Parameters}
{\em list} & a pointer to the list being checked for size. \\
\hline
\end{DoxyParams}
\hypertarget{mylib_2List_8c_a43f64a19c9aafabbd572908151547fe2}{}\index{mylib/\+List.\+c@{mylib/\+List.\+c}!is\+Empty@{is\+Empty}}
\index{is\+Empty@{is\+Empty}!mylib/\+List.\+c@{mylib/\+List.\+c}}
\subsubsection[{is\+Empty}]{\setlength{\rightskip}{0pt plus 5cm}{\bf Boolean} is\+Empty (
\begin{DoxyParamCaption}
\item[{{\bf List\+Ptr}}]{L}
\end{DoxyParamCaption}
)}\label{mylib_2List_8c_a43f64a19c9aafabbd572908151547fe2}


Checks if the list is empty. 


\begin{DoxyParams}{Parameters}
{\em L} & a pointer to a {\ttfamily List}. \\
\hline
\end{DoxyParams}
\begin{DoxyReturn}{Returns}
true if the list is empty; false otherwise.
\end{DoxyReturn}
Checks if the list is empty.

Returns the status of whether a list has elements. 
\begin{DoxyParams}{Parameters}
{\em list} & a pointer to the list being checked if empty. \\
\hline
\end{DoxyParams}
\hypertarget{mylib_2List_8c_a371ecec3cccc55211c0f166be8d8e0d0}{}\index{mylib/\+List.\+c@{mylib/\+List.\+c}!print@{print}}
\index{print@{print}!mylib/\+List.\+c@{mylib/\+List.\+c}}
\subsubsection[{print}]{\setlength{\rightskip}{0pt plus 5cm}static void print (
\begin{DoxyParamCaption}
\item[{const {\bf Node\+Ptr}}]{node, }
\item[{char $\ast$($\ast$)(const void $\ast$)}]{to\+String}
\end{DoxyParamCaption}
)\hspace{0.3cm}{\ttfamily [static]}}\label{mylib_2List_8c_a371ecec3cccc55211c0f166be8d8e0d0}
\hypertarget{mylib_2List_8c_ae06d135fd1ae5ca0754ef38cec8889d5}{}\index{mylib/\+List.\+c@{mylib/\+List.\+c}!print\+List@{print\+List}}
\index{print\+List@{print\+List}!mylib/\+List.\+c@{mylib/\+List.\+c}}
\subsubsection[{print\+List}]{\setlength{\rightskip}{0pt plus 5cm}void print\+List (
\begin{DoxyParamCaption}
\item[{const {\bf List\+Ptr}}]{list}
\end{DoxyParamCaption}
)}\label{mylib_2List_8c_ae06d135fd1ae5ca0754ef38cec8889d5}


Prints the list. 


\begin{DoxyParams}{Parameters}
{\em list} & a pointer to a {\ttfamily List}.\\
\hline
\end{DoxyParams}
Prints the list.

Prints a human readable list of a list and it\textquotesingle{}s contents 
\begin{DoxyParams}{Parameters}
{\em list} & a pointer to the list being printed \\
\hline
\end{DoxyParams}
\hypertarget{mylib_2List_8c_a21ea604b2c4b634c83152e4de532ca33}{}\index{mylib/\+List.\+c@{mylib/\+List.\+c}!remove\+Front@{remove\+Front}}
\index{remove\+Front@{remove\+Front}!mylib/\+List.\+c@{mylib/\+List.\+c}}
\subsubsection[{remove\+Front}]{\setlength{\rightskip}{0pt plus 5cm}{\bf Node\+Ptr} remove\+Front (
\begin{DoxyParamCaption}
\item[{{\bf List\+Ptr}}]{list}
\end{DoxyParamCaption}
)}\label{mylib_2List_8c_a21ea604b2c4b634c83152e4de532ca33}


Removes the node from the front of the list (the head node) and returns a pointer to the node that was removed. 

If the list is N\+U\+L\+L or empty, the function will do nothing and return N\+U\+L\+L.


\begin{DoxyParams}{Parameters}
{\em list} & a pointer to a {\ttfamily List}. \\
\hline
\end{DoxyParams}
\begin{DoxyReturn}{Returns}
a pointer to the node that was removed.
\end{DoxyReturn}
Removes the node from the front of the list (the head node) and returns a pointer to the node that was removed.

Removes the front node of a list 
\begin{DoxyParams}{Parameters}
{\em list} & a pointer to the list being removed from \\
\hline
{\em node} & a pointer to the node being removed \\
\hline
\end{DoxyParams}
\hypertarget{mylib_2List_8c_a7759b3a50942a4d588c73757ce2e15bf}{}\index{mylib/\+List.\+c@{mylib/\+List.\+c}!remove\+Node@{remove\+Node}}
\index{remove\+Node@{remove\+Node}!mylib/\+List.\+c@{mylib/\+List.\+c}}
\subsubsection[{remove\+Node}]{\setlength{\rightskip}{0pt plus 5cm}{\bf Node\+Ptr} remove\+Node (
\begin{DoxyParamCaption}
\item[{{\bf List\+Ptr}}]{list, }
\item[{{\bf Node\+Ptr}}]{node}
\end{DoxyParamCaption}
)}\label{mylib_2List_8c_a7759b3a50942a4d588c73757ce2e15bf}


Removes the node pointed to by the given node pointer from the list and returns the pointer to it. 

Assumes that the node is a valid node in the list. If the node pointer is N\+U\+L\+L, the function will do nothing and return N\+U\+L\+L.


\begin{DoxyParams}{Parameters}
{\em list} & a pointer to a {\ttfamily List}. \\
\hline
{\em node} & a pointer to the node to remove. \\
\hline
\end{DoxyParams}
\begin{DoxyReturn}{Returns}
a pointer to the node that was removed.
\end{DoxyReturn}
Removes the node pointed to by the given node pointer from the list and returns the pointer to it.

Removes a node from a given list 
\begin{DoxyParams}{Parameters}
{\em list} & a pointer to the list being removed from \\
\hline
{\em node} & a pointer to the node being removed \\
\hline
\end{DoxyParams}
\hypertarget{mylib_2List_8c_a79b7613686651c0fdd9ba75859ab1cf4}{}\index{mylib/\+List.\+c@{mylib/\+List.\+c}!remove\+Rear@{remove\+Rear}}
\index{remove\+Rear@{remove\+Rear}!mylib/\+List.\+c@{mylib/\+List.\+c}}
\subsubsection[{remove\+Rear}]{\setlength{\rightskip}{0pt plus 5cm}{\bf Node\+Ptr} remove\+Rear (
\begin{DoxyParamCaption}
\item[{{\bf List\+Ptr}}]{list}
\end{DoxyParamCaption}
)}\label{mylib_2List_8c_a79b7613686651c0fdd9ba75859ab1cf4}


Removes the node from the rear of the list (the tail node) and returns a pointer to the node that was removed. 

If the list is N\+U\+L\+L or empty, the function will do nothing and return N\+U\+L\+L.


\begin{DoxyParams}{Parameters}
{\em list} & a pointer to a {\ttfamily List}. \\
\hline
\end{DoxyParams}
\begin{DoxyReturn}{Returns}
a pointer to the node that was removed.
\end{DoxyReturn}
Removes the node from the rear of the list (the tail node) and returns a pointer to the node that was removed.

Removes the rear node of a list 
\begin{DoxyParams}{Parameters}
{\em list} & a pointer to the list being removed from \\
\hline
{\em node} & a pointer to the node being removed \\
\hline
\end{DoxyParams}
\hypertarget{mylib_2List_8c_a98ef2e3e4d692de272b451a11015fdad}{}\index{mylib/\+List.\+c@{mylib/\+List.\+c}!reverse\+List@{reverse\+List}}
\index{reverse\+List@{reverse\+List}!mylib/\+List.\+c@{mylib/\+List.\+c}}
\subsubsection[{reverse\+List}]{\setlength{\rightskip}{0pt plus 5cm}void reverse\+List (
\begin{DoxyParamCaption}
\item[{{\bf List\+Ptr}}]{L}
\end{DoxyParamCaption}
)}\label{mylib_2List_8c_a98ef2e3e4d692de272b451a11015fdad}


Reverses the order of the given list. 


\begin{DoxyParams}{Parameters}
{\em list} & a pointer to a {\ttfamily List}.\\
\hline
\end{DoxyParams}
Reverses the order of the given list.

Reverses the order of a given list 
\begin{DoxyParams}{Parameters}
{\em list} & a pointer to the list being searched \\
\hline
\end{DoxyParams}
\hypertarget{mylib_2List_8c_a0034106dcaa9abb1f1ecc2de47ce4622}{}\index{mylib/\+List.\+c@{mylib/\+List.\+c}!search@{search}}
\index{search@{search}!mylib/\+List.\+c@{mylib/\+List.\+c}}
\subsubsection[{search}]{\setlength{\rightskip}{0pt plus 5cm}{\bf Node\+Ptr} search (
\begin{DoxyParamCaption}
\item[{{\bf List\+Ptr}}]{list, }
\item[{const void $\ast$}]{o}
\end{DoxyParamCaption}
)}\label{mylib_2List_8c_a0034106dcaa9abb1f1ecc2de47ce4622}


Searches the list for a node with the given key and returns the pointer to the found node. 


\begin{DoxyParams}{Parameters}
{\em list} & a pointer to a {\ttfamily List}. \\
\hline
{\em the} & object to search for. \\
\hline
\end{DoxyParams}
\begin{DoxyReturn}{Returns}
a pointer to the node that was found. Or {\ttfamily N\+U\+L\+L} if a node with the given key is not found or the list is {\ttfamily N\+U\+L\+L} or empty.
\end{DoxyReturn}
Searches the list for a node with the given key and returns the pointer to the found node.

searches a given list for a node containing a given object 
\begin{DoxyParams}{Parameters}
{\em list} & a pointer to the list being searched \\
\hline
{\em obj} & a pointer to an object being searched for \\
\hline
\end{DoxyParams}


\subsection{Variable Documentation}
\hypertarget{mylib_2List_8c_a281bbb03dfa5d9cc744f9b412db23f38}{}\index{mylib/\+List.\+c@{mylib/\+List.\+c}!temp\+Job@{temp\+Job}}
\index{temp\+Job@{temp\+Job}!mylib/\+List.\+c@{mylib/\+List.\+c}}
\subsubsection[{temp\+Job}]{\setlength{\rightskip}{0pt plus 5cm}Word\+Obj\+Ptr temp\+Job}\label{mylib_2List_8c_a281bbb03dfa5d9cc744f9b412db23f38}
\hypertarget{mylib_2List_8c_acba5f084de2678df16ca48e737ef7780}{}\index{mylib/\+List.\+c@{mylib/\+List.\+c}!templist@{templist}}
\index{templist@{templist}!mylib/\+List.\+c@{mylib/\+List.\+c}}
\subsubsection[{templist}]{\setlength{\rightskip}{0pt plus 5cm}{\bf List\+Ptr} templist}\label{mylib_2List_8c_acba5f084de2678df16ca48e737ef7780}
