
#include <stdio.h>
#include <stdlib.h>
#include <readline/readline.h>
#include <readline/history.h>
#include <wordexp.h>
#include <unistd.h>
#include <string.h>
#include <sys/wait.h>
#include <pwd.h>
#include "include/List.h"
#include "include/Node.h"
#include "include/Object.h"
#include "include/common.h"
#include "mydash.h"
#include "ourhdr.h"

/* author kgross
cs-453
project 5 mydash with buddy
*/



char *svn_version(void);

/* int getjobid(ListPtr jobslist)
@parms the list of jobs
@returns the next available job id
*/



int getjobid(ListPtr jobslist)
{
    int jobid;

    if (isEmpty(jobslist)) {
	return 1;
    }



    jobid = getMaxJobId(jobslist);

    return jobid;
}

/*
void trim_trailing_whitespace(char *line)
@parm *line   The line to trim
@returns voide
removes all trailing whitespace from the line
*/





void trim_trailing_whitespace(char *line)
{

    int i = strlen(line) - 1;

    while (i > 0) {
	if (isspace(line[i])) {
	    line[i] = '\0';
	} else {
	    break;
	}
	i--;
    }
}

/*
int check_for_ampersand(char *string)
@parms *string the string to search
@returns 1 if ampersand, 0 if not
looks at the end of the string for an ampersand to start in background
*/




int check_for_ampersand(char *string)
{
    char last_char = string[strlen(string) - 1];
    if (last_char == '&') {
	string[strlen(string) - 1] = '\0';
	return 1;
    } else
	return 0;
}


/* 
int check_version(const char * arg1)
@parm command line arguments
@returns the svn version number
returns the svn version number of the project
*/




int check_version(const char *arg1)
{
    wordexp_t res;
    if (strcmp(arg1, "-v") == 0) {

	char *svn_ver = svn_version();
	printf("%s \n", svn_ver);

	switch (wordexp(svn_ver, &res, 0)) {
	case 0:
	    break;
	case WRDE_NOSPACE:
	    wordfree(&res);
	default:
	    return -1;
	}
	execvp(res.we_wordv[0], res.we_wordv);
	exit(0);
    }
    return 0;
}

/*
int expand_and_execute(char *program, ListPtr jobslist)
@parms *program  ListPtr
@return exit status
forks if needed and execs the program.
*/





int expand_and_execute(char *program, ListPtr jobslist)
{
    wordexp_t result;
    pid_t pid;
    int status, background;

    trim_trailing_whitespace(program);
    background = check_for_ampersand(program);


    switch (wordexp(program, &result, 0)) {
    case 0:
	update_jobs_status(jobslist, 0);
	break;
    case WRDE_NOSPACE:

	wordfree(&result);
    default:
	return -1;
    }
    if (result.we_wordv[0] != NULL) {
	if (strcmp(result.we_wordv[0], "exit") == 0) {
	    status = -2;
	} else if (strcmp(result.we_wordv[0], "jobs") == 0) {
	    update_jobs_status(jobslist, 1);
	} else if (strcmp(result.we_wordv[0], "cd") == 0) {
	    if (result.we_wordv[1] == NULL) {
		struct passwd *pws;
		pws = getpwuid(geteuid());
		chdir(pws->pw_dir);
	    } else
		chdir(result.we_wordv[1]);
	} else {
	    pid = fork();
	    if (pid == 0) {
		execvp(result.we_wordv[0], result.we_wordv);
		printf("my_dash: %s: command not found\n",
		       result.we_wordv[0]);
		exit(EXIT_FAILURE);
	    } else if (pid < 0)
		status = -1;
	    else {
		if (background == 1) {


		    ObjectPtr jobyjob = createObject(pid, program);
		    jobyjob->jobid = getjobid(jobslist);
		    addAtRear(jobslist, createNode(jobyjob));
		    printf("%d  %s &\n", jobyjob->jobid, program);
		} else if (waitpid(pid, &status, 0) != pid)
		    status = -1;

	    }

	}
    }
    wordfree(&result);
    return status;
}

/*
void update_jobs_stats(listPtr list, int all)
@parms listPtr of the list to update
@parms int  1 to update all , 0 to just print what is done

Update the job stats saved in the list
*/





void update_jobs_status(ListPtr list, int all)
{
    NodePtr curr = list->head;
    NodePtr temp;
    int status;
    while (curr != NULL) {
	pid_t job = ((ObjectPtr) curr->obj)->key;
	job = waitpid(job, &status, WNOHANG);

	if (job != 0) {
	    printf("%d Done %s\n", ((ObjectPtr) curr->obj)->jobid,
		   ((ObjectPtr) curr->obj)->data);
	    temp = curr;

	    //  removeNode(list, temp);
	} else {
	    if (all == 1) {
		printf("%d Running %s \n",
		       ((ObjectPtr) curr->obj)->jobid,
		       ((ObjectPtr) curr->obj)->data);
	    }
	}
	curr = curr->next;
    }

    curr = list->head;

    while (curr != NULL) {
	pid_t job = ((ObjectPtr) curr->obj)->key;
	job = waitpid(job, &status, WNOHANG);

	if (job != 0) {
	    //    printf("%s Job finished: %d\n", ((ObjectPtr)curr->obj)->data,((ObjectPtr)curr->obj)->jobid );
	    temp = curr;

	    // removeNode(list, temp);
	} else {
	    temp = NULL;
	}
	curr = curr->next;
	removeNode(list, temp);
	freeNode(temp, list->freeObject);
    }

}

int main(int argc, char *argv[])
{
    printf("starting");

    if (argc > 1) {
	check_version(argv[1]);
    }
    printf("creating list");
    ListPtr jobslist = createList(compareTo, toString, freeObject);
    printf("created list");
    char *line;
    char *prompt = "dash>";
    char *env_name = "DASH_PROMPT";
    char *env_prompt = getenv(env_name);
    if (env_prompt != NULL)
	prompt = env_prompt;
    int status;

    using_history();
    while ((line = readline(prompt))) {
	add_history(line);
	status = expand_and_execute(line, jobslist);
	free(line);
	if (status == -2)
	    exit(0);
    }
    freeList(jobslist);
    exit(0);

}
