<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.9.1"/>
<title>mydash: include/List.h File Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { init_search(); });
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;">
   <div id="projectname">mydash
   &#160;<span id="projectnumber">Version1</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.9.1 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.html"><span>Main&#160;Page</span></a></li>
      <li><a href="annotated.html"><span>Data&#160;Structures</span></a></li>
      <li class="current"><a href="files.html"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.html"><span>File&#160;List</span></a></li>
      <li><a href="globals.html"><span>Globals</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_d44c64559bbebec7f509842c48db8b23.html">include</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#nested-classes">Data Structures</a> &#124;
<a href="#typedef-members">Typedefs</a> &#124;
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">List.h File Reference</div>  </div>
</div><!--header-->
<div class="contents">
<div class="textblock"><code>#include &lt;stdio.h&gt;</code><br />
<code>#include &lt;stdlib.h&gt;</code><br />
<code>#include &quot;<a class="el" href="include_2common_8h_source.html">common.h</a>&quot;</code><br />
<code>#include &quot;<a class="el" href="include_2Node_8h_source.html">Node.h</a>&quot;</code><br />
</div>
<p><a href="include_2List_8h_source.html">Go to the source code of this file.</a></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="nested-classes"></a>
Data Structures</h2></td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structlist.html">list</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="typedef-members"></a>
Typedefs</h2></td></tr>
<tr class="memitem:aa89b8bc105d9a09d4e7c06e8b34078a7"><td class="memItemLeft" align="right" valign="top">typedef struct <a class="el" href="structlist.html">list</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="include_2List_8h.html#aa89b8bc105d9a09d4e7c06e8b34078a7">List</a></td></tr>
<tr class="separator:aa89b8bc105d9a09d4e7c06e8b34078a7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a861ccde58c51198da7548ab818f1bbdd"><td class="memItemLeft" align="right" valign="top">typedef struct <a class="el" href="structlist.html">list</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="include_2List_8h.html#a861ccde58c51198da7548ab818f1bbdd">ListPtr</a></td></tr>
<tr class="separator:a861ccde58c51198da7548ab818f1bbdd"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:ac9beedc5dbdcce9fb20bfd5edbe2bd08"><td class="memItemLeft" align="right" valign="top"><a class="el" href="include_2List_8h.html#a861ccde58c51198da7548ab818f1bbdd">ListPtr</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="include_2List_8h.html#ac9beedc5dbdcce9fb20bfd5edbe2bd08">createList</a> (int(*<a class="el" href="mylib_2Object_8h.html#a5cadf14267575f2ee8f0cf226af7a7aa">compareTo</a>)(const void *, const void *), char *(*<a class="el" href="mylib_2Object_8h.html#a6dfc43d9b4cbc992846435ee727f3454">toString</a>)(const void *), void(*<a class="el" href="mylib_2Object_8h.html#ad224f50cb1912941fc68947b6fc03219">freeObject</a>)(const void *))</td></tr>
<tr class="memdesc:ac9beedc5dbdcce9fb20bfd5edbe2bd08"><td class="mdescLeft">&#160;</td><td class="mdescRight">Constructor: Allocates a new List object and initializes its members.  <a href="#ac9beedc5dbdcce9fb20bfd5edbe2bd08">More...</a><br /></td></tr>
<tr class="separator:ac9beedc5dbdcce9fb20bfd5edbe2bd08"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad9957663fe65761dbf9031ee8280fdae"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="include_2List_8h.html#ad9957663fe65761dbf9031ee8280fdae">freeList</a> (const <a class="el" href="include_2List_8h.html#a861ccde58c51198da7548ab818f1bbdd">ListPtr</a> L)</td></tr>
<tr class="memdesc:ad9957663fe65761dbf9031ee8280fdae"><td class="mdescLeft">&#160;</td><td class="mdescRight">Frees all elements of the given list and the <code>ListPtr</code> itself.  <a href="#ad9957663fe65761dbf9031ee8280fdae">More...</a><br /></td></tr>
<tr class="separator:ad9957663fe65761dbf9031ee8280fdae"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a43f9b7f7f62dca403a8629190a533a23"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="include_2List_8h.html#a43f9b7f7f62dca403a8629190a533a23">getSize</a> (const <a class="el" href="include_2List_8h.html#a861ccde58c51198da7548ab818f1bbdd">ListPtr</a> L)</td></tr>
<tr class="memdesc:a43f9b7f7f62dca403a8629190a533a23"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the size of the given list.  <a href="#a43f9b7f7f62dca403a8629190a533a23">More...</a><br /></td></tr>
<tr class="separator:a43f9b7f7f62dca403a8629190a533a23"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6ac4ede2527b19f1b1da9da0d85cb976"><td class="memItemLeft" align="right" valign="top"><a class="el" href="include_2common_8h.html#a127a96e09108f503cca20256eaa4ddff">Boolean</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="include_2List_8h.html#a6ac4ede2527b19f1b1da9da0d85cb976">isEmpty</a> (const <a class="el" href="include_2List_8h.html#a861ccde58c51198da7548ab818f1bbdd">ListPtr</a> L)</td></tr>
<tr class="memdesc:a6ac4ede2527b19f1b1da9da0d85cb976"><td class="mdescLeft">&#160;</td><td class="mdescRight">Checks if the list is empty.  <a href="#a6ac4ede2527b19f1b1da9da0d85cb976">More...</a><br /></td></tr>
<tr class="separator:a6ac4ede2527b19f1b1da9da0d85cb976"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a476cc4f9f3eac74de69922b337d3f5d4"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="include_2List_8h.html#a476cc4f9f3eac74de69922b337d3f5d4">addAtFront</a> (<a class="el" href="include_2List_8h.html#a861ccde58c51198da7548ab818f1bbdd">ListPtr</a> <a class="el" href="structlist.html">list</a>, <a class="el" href="include_2Node_8h.html#aa6eec21621b8638e350fd0ec238a9715">NodePtr</a> <a class="el" href="structnode.html">node</a>)</td></tr>
<tr class="memdesc:a476cc4f9f3eac74de69922b337d3f5d4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Adds a node to the front of the list.  <a href="#a476cc4f9f3eac74de69922b337d3f5d4">More...</a><br /></td></tr>
<tr class="separator:a476cc4f9f3eac74de69922b337d3f5d4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a194ecb3333d63b8d9b65c9a1bc12e395"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="include_2List_8h.html#a194ecb3333d63b8d9b65c9a1bc12e395">addAtRear</a> (<a class="el" href="include_2List_8h.html#a861ccde58c51198da7548ab818f1bbdd">ListPtr</a> <a class="el" href="structlist.html">list</a>, <a class="el" href="include_2Node_8h.html#aa6eec21621b8638e350fd0ec238a9715">NodePtr</a> <a class="el" href="structnode.html">node</a>)</td></tr>
<tr class="memdesc:a194ecb3333d63b8d9b65c9a1bc12e395"><td class="mdescLeft">&#160;</td><td class="mdescRight">Adds a node to the rear of the list.  <a href="#a194ecb3333d63b8d9b65c9a1bc12e395">More...</a><br /></td></tr>
<tr class="separator:a194ecb3333d63b8d9b65c9a1bc12e395"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a21ea604b2c4b634c83152e4de532ca33"><td class="memItemLeft" align="right" valign="top"><a class="el" href="include_2Node_8h.html#aa6eec21621b8638e350fd0ec238a9715">NodePtr</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="include_2List_8h.html#a21ea604b2c4b634c83152e4de532ca33">removeFront</a> (<a class="el" href="include_2List_8h.html#a861ccde58c51198da7548ab818f1bbdd">ListPtr</a> <a class="el" href="structlist.html">list</a>)</td></tr>
<tr class="memdesc:a21ea604b2c4b634c83152e4de532ca33"><td class="mdescLeft">&#160;</td><td class="mdescRight">Removes the node from the front of the list (the head node) and returns a pointer to the node that was removed.  <a href="#a21ea604b2c4b634c83152e4de532ca33">More...</a><br /></td></tr>
<tr class="separator:a21ea604b2c4b634c83152e4de532ca33"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a79b7613686651c0fdd9ba75859ab1cf4"><td class="memItemLeft" align="right" valign="top"><a class="el" href="include_2Node_8h.html#aa6eec21621b8638e350fd0ec238a9715">NodePtr</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="include_2List_8h.html#a79b7613686651c0fdd9ba75859ab1cf4">removeRear</a> (<a class="el" href="include_2List_8h.html#a861ccde58c51198da7548ab818f1bbdd">ListPtr</a> <a class="el" href="structlist.html">list</a>)</td></tr>
<tr class="memdesc:a79b7613686651c0fdd9ba75859ab1cf4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Removes the node from the rear of the list (the tail node) and returns a pointer to the node that was removed.  <a href="#a79b7613686651c0fdd9ba75859ab1cf4">More...</a><br /></td></tr>
<tr class="separator:a79b7613686651c0fdd9ba75859ab1cf4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7759b3a50942a4d588c73757ce2e15bf"><td class="memItemLeft" align="right" valign="top"><a class="el" href="include_2Node_8h.html#aa6eec21621b8638e350fd0ec238a9715">NodePtr</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="include_2List_8h.html#a7759b3a50942a4d588c73757ce2e15bf">removeNode</a> (<a class="el" href="include_2List_8h.html#a861ccde58c51198da7548ab818f1bbdd">ListPtr</a> <a class="el" href="structlist.html">list</a>, <a class="el" href="include_2Node_8h.html#aa6eec21621b8638e350fd0ec238a9715">NodePtr</a> <a class="el" href="structnode.html">node</a>)</td></tr>
<tr class="memdesc:a7759b3a50942a4d588c73757ce2e15bf"><td class="mdescLeft">&#160;</td><td class="mdescRight">Removes the node pointed to by the given node pointer from the list and returns the pointer to it.  <a href="#a7759b3a50942a4d588c73757ce2e15bf">More...</a><br /></td></tr>
<tr class="separator:a7759b3a50942a4d588c73757ce2e15bf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa5520d98825d2037e3d05b369c6e7dc1"><td class="memItemLeft" align="right" valign="top"><a class="el" href="include_2Node_8h.html#aa6eec21621b8638e350fd0ec238a9715">NodePtr</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="include_2List_8h.html#aa5520d98825d2037e3d05b369c6e7dc1">search</a> (const <a class="el" href="include_2List_8h.html#a861ccde58c51198da7548ab818f1bbdd">ListPtr</a> <a class="el" href="structlist.html">list</a>, const void *obj)</td></tr>
<tr class="memdesc:aa5520d98825d2037e3d05b369c6e7dc1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Searches the list for a node with the given key and returns the pointer to the found node.  <a href="#aa5520d98825d2037e3d05b369c6e7dc1">More...</a><br /></td></tr>
<tr class="separator:aa5520d98825d2037e3d05b369c6e7dc1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a98ef2e3e4d692de272b451a11015fdad"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="include_2List_8h.html#a98ef2e3e4d692de272b451a11015fdad">reverseList</a> (<a class="el" href="include_2List_8h.html#a861ccde58c51198da7548ab818f1bbdd">ListPtr</a> L)</td></tr>
<tr class="memdesc:a98ef2e3e4d692de272b451a11015fdad"><td class="mdescLeft">&#160;</td><td class="mdescRight">Reverses the order of the given list.  <a href="#a98ef2e3e4d692de272b451a11015fdad">More...</a><br /></td></tr>
<tr class="separator:a98ef2e3e4d692de272b451a11015fdad"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac04bab051b7a4fec4b9a69f851de13ae"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="include_2List_8h.html#ac04bab051b7a4fec4b9a69f851de13ae">getMaxJobId</a> (<a class="el" href="include_2List_8h.html#a861ccde58c51198da7548ab818f1bbdd">ListPtr</a> L)</td></tr>
<tr class="memdesc:ac04bab051b7a4fec4b9a69f851de13ae"><td class="mdescLeft">&#160;</td><td class="mdescRight">A Doubly-linked List Class.  <a href="#ac04bab051b7a4fec4b9a69f851de13ae">More...</a><br /></td></tr>
<tr class="separator:ac04bab051b7a4fec4b9a69f851de13ae"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afd2b3015c02dc09c508149f0873d64b0"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="include_2List_8h.html#afd2b3015c02dc09c508149f0873d64b0">printList</a> (const <a class="el" href="include_2List_8h.html#a861ccde58c51198da7548ab818f1bbdd">ListPtr</a> L)</td></tr>
<tr class="memdesc:afd2b3015c02dc09c508149f0873d64b0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Prints the list.  <a href="#afd2b3015c02dc09c508149f0873d64b0">More...</a><br /></td></tr>
<tr class="separator:afd2b3015c02dc09c508149f0873d64b0"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<h2 class="groupheader">Typedef Documentation</h2>
<a class="anchor" id="aa89b8bc105d9a09d4e7c06e8b34078a7"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef struct <a class="el" href="structlist.html">list</a> <a class="el" href="include_2List_8h.html#aa89b8bc105d9a09d4e7c06e8b34078a7">List</a></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a class="anchor" id="a861ccde58c51198da7548ab818f1bbdd"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef struct <a class="el" href="structlist.html">list</a>* <a class="el" href="include_2List_8h.html#a861ccde58c51198da7548ab818f1bbdd">ListPtr</a></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<h2 class="groupheader">Function Documentation</h2>
<a class="anchor" id="a476cc4f9f3eac74de69922b337d3f5d4"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void addAtFront </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="include_2List_8h.html#a861ccde58c51198da7548ab818f1bbdd">ListPtr</a>&#160;</td>
          <td class="paramname"><em>list</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="include_2Node_8h.html#aa6eec21621b8638e350fd0ec238a9715">NodePtr</a>&#160;</td>
          <td class="paramname"><em>node</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Adds a node to the front of the list. </p>
<p>After this method is called, the given node will be the head of the list. (Node must be allocated before it is passed to this function.) If the list and/or node are NULL, the function will do nothing and return.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">list</td><td>a pointer to a <code>List</code>. </td></tr>
    <tr><td class="paramname">node</td><td>a pointer to the node to add.</td></tr>
  </table>
  </dd>
</dl>
<p>Adds a node to the front of the list.</p>
<p>Adds a node to the front of a list </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">list</td><td>a pointer to the list being added too </td></tr>
    <tr><td class="paramname">node</td><td>a pointer to the node being added </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a194ecb3333d63b8d9b65c9a1bc12e395"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void addAtRear </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="include_2List_8h.html#a861ccde58c51198da7548ab818f1bbdd">ListPtr</a>&#160;</td>
          <td class="paramname"><em>list</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="include_2Node_8h.html#aa6eec21621b8638e350fd0ec238a9715">NodePtr</a>&#160;</td>
          <td class="paramname"><em>node</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Adds a node to the rear of the list. </p>
<p>After this method is called, the given node will be the tail of the list. (Node must be allocated before it is passed to this function.) If the list and/or node are NULL, the function will do nothing and return.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">list</td><td>a pointer to a <code>List</code>. </td></tr>
    <tr><td class="paramname">node</td><td>a pointer to the node to add.</td></tr>
  </table>
  </dd>
</dl>
<p>Adds a node to the rear of the list.</p>
<p>Adds a node to the rear of a list </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">list</td><td>a pointer to the list being added too </td></tr>
    <tr><td class="paramname">node</td><td>a pointer to the node being added </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ac9beedc5dbdcce9fb20bfd5edbe2bd08"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="include_2List_8h.html#a861ccde58c51198da7548ab818f1bbdd">ListPtr</a> createList </td>
          <td>(</td>
          <td class="paramtype">int(*)(const void *, const void *)&#160;</td>
          <td class="paramname"><em>compareTo</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">char *(*)(const void *)&#160;</td>
          <td class="paramname"><em>toString</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void(*)(const void *)&#160;</td>
          <td class="paramname"><em>freeObject</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Constructor: Allocates a new List object and initializes its members. </p>
<p><code>(size = 0; head = NULL, tail = NULL)</code>.</p>
<dl class="section return"><dt>Returns</dt><dd>a pointer to the allocated list.</dd></dl>
<p>Constructor: Allocates a new List object and initializes its members.</p>
<p>Creates a new list and returns a pointer to the list. </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">compareTo</td><td>a function pointer used for comparison of nodes. </td></tr>
    <tr><td class="paramname">toString</td><td>a function pointer used for String converstion. </td></tr>
    <tr><td class="paramname">freeObject</td><td>a function pointer used for deallocate generic object types. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ad9957663fe65761dbf9031ee8280fdae"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void freeList </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="include_2List_8h.html#a861ccde58c51198da7548ab818f1bbdd">ListPtr</a>&#160;</td>
          <td class="paramname"><em>list</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Frees all elements of the given list and the <code>ListPtr</code> itself. </p>
<p>Does nothing if L is <code>NULL</code>.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">L</td><td>a pointer to a <code>List</code>.</td></tr>
  </table>
  </dd>
</dl>
<p>Frees all elements of the given list and the <code>ListPtr</code> itself.</p>
<p>Frees each individual node and then frees the list's allocated memory. </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">list</td><td>a pointer to the list to be deallocated </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ac04bab051b7a4fec4b9a69f851de13ae"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int getMaxJobId </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="include_2List_8h.html#a861ccde58c51198da7548ab818f1bbdd">ListPtr</a>&#160;</td>
          <td class="paramname"><em>L</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>A Doubly-linked List Class. </p>

</div>
</div>
<a class="anchor" id="a43f9b7f7f62dca403a8629190a533a23"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int getSize </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="include_2List_8h.html#a861ccde58c51198da7548ab818f1bbdd">ListPtr</a>&#160;</td>
          <td class="paramname"><em>list</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns the size of the given list. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">L</td><td>a pointer to a <code>List</code>. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The current size of the list.</dd></dl>
<p>Returns the size of the given list.</p>
<p>Returns the current size of the list </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">list</td><td>a pointer to the list being checked for size. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a6ac4ede2527b19f1b1da9da0d85cb976"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="include_2common_8h.html#a127a96e09108f503cca20256eaa4ddff">Boolean</a> isEmpty </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="include_2List_8h.html#a861ccde58c51198da7548ab818f1bbdd">ListPtr</a>&#160;</td>
          <td class="paramname"><em>list</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Checks if the list is empty. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">L</td><td>a pointer to a <code>List</code>. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>true if the list is empty; false otherwise.</dd></dl>
<p>Checks if the list is empty.</p>
<p>Returns the status of whether a list has elements. </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">list</td><td>a pointer to the list being checked if empty. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="afd2b3015c02dc09c508149f0873d64b0"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void printList </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="include_2List_8h.html#a861ccde58c51198da7548ab818f1bbdd">ListPtr</a>&#160;</td>
          <td class="paramname"><em>list</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Prints the list. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">list</td><td>a pointer to a <code>List</code>.</td></tr>
  </table>
  </dd>
</dl>
<p>Prints the list.</p>
<p>Prints a human readable list of a list and it's contents </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">list</td><td>a pointer to the list being printed </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a21ea604b2c4b634c83152e4de532ca33"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="include_2Node_8h.html#aa6eec21621b8638e350fd0ec238a9715">NodePtr</a> removeFront </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="include_2List_8h.html#a861ccde58c51198da7548ab818f1bbdd">ListPtr</a>&#160;</td>
          <td class="paramname"><em>list</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Removes the node from the front of the list (the head node) and returns a pointer to the node that was removed. </p>
<p>If the list is NULL or empty, the function will do nothing and return NULL.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">list</td><td>a pointer to a <code>List</code>. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>a pointer to the node that was removed.</dd></dl>
<p>Removes the node from the front of the list (the head node) and returns a pointer to the node that was removed.</p>
<p>Removes the front node of a list </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">list</td><td>a pointer to the list being removed from </td></tr>
    <tr><td class="paramname">node</td><td>a pointer to the node being removed </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a7759b3a50942a4d588c73757ce2e15bf"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="include_2Node_8h.html#aa6eec21621b8638e350fd0ec238a9715">NodePtr</a> removeNode </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="include_2List_8h.html#a861ccde58c51198da7548ab818f1bbdd">ListPtr</a>&#160;</td>
          <td class="paramname"><em>list</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="include_2Node_8h.html#aa6eec21621b8638e350fd0ec238a9715">NodePtr</a>&#160;</td>
          <td class="paramname"><em>node</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Removes the node pointed to by the given node pointer from the list and returns the pointer to it. </p>
<p>Assumes that the node is a valid node in the list. If the node pointer is NULL, the function will do nothing and return NULL.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">list</td><td>a pointer to a <code>List</code>. </td></tr>
    <tr><td class="paramname">node</td><td>a pointer to the node to remove. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>a pointer to the node that was removed.</dd></dl>
<p>Removes the node pointed to by the given node pointer from the list and returns the pointer to it.</p>
<p>Removes a node from a given list </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">list</td><td>a pointer to the list being removed from </td></tr>
    <tr><td class="paramname">node</td><td>a pointer to the node being removed </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a79b7613686651c0fdd9ba75859ab1cf4"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="include_2Node_8h.html#aa6eec21621b8638e350fd0ec238a9715">NodePtr</a> removeRear </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="include_2List_8h.html#a861ccde58c51198da7548ab818f1bbdd">ListPtr</a>&#160;</td>
          <td class="paramname"><em>list</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Removes the node from the rear of the list (the tail node) and returns a pointer to the node that was removed. </p>
<p>If the list is NULL or empty, the function will do nothing and return NULL.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">list</td><td>a pointer to a <code>List</code>. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>a pointer to the node that was removed.</dd></dl>
<p>Removes the node from the rear of the list (the tail node) and returns a pointer to the node that was removed.</p>
<p>Removes the rear node of a list </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">list</td><td>a pointer to the list being removed from </td></tr>
    <tr><td class="paramname">node</td><td>a pointer to the node being removed </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a98ef2e3e4d692de272b451a11015fdad"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void reverseList </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="include_2List_8h.html#a861ccde58c51198da7548ab818f1bbdd">ListPtr</a>&#160;</td>
          <td class="paramname"><em>list</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Reverses the order of the given list. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">list</td><td>a pointer to a <code>List</code>.</td></tr>
  </table>
  </dd>
</dl>
<p>Reverses the order of the given list.</p>
<p>Reverses the order of a given list </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">list</td><td>a pointer to the list being searched </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="aa5520d98825d2037e3d05b369c6e7dc1"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="include_2Node_8h.html#aa6eec21621b8638e350fd0ec238a9715">NodePtr</a> search </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="include_2List_8h.html#a861ccde58c51198da7548ab818f1bbdd">ListPtr</a>&#160;</td>
          <td class="paramname"><em>list</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const void *&#160;</td>
          <td class="paramname"><em>obj</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Searches the list for a node with the given key and returns the pointer to the found node. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">list</td><td>a pointer to a <code>List</code>. </td></tr>
    <tr><td class="paramname">the</td><td>object to search for. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>a pointer to the node that was found. Or <code>NULL</code> if a node with the given key is not found or the list is <code>NULL</code> or empty.</dd></dl>
<p>Searches the list for a node with the given key and returns the pointer to the found node.</p>
<p>searches a given list for a node containing a given object </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">list</td><td>a pointer to the list being searched </td></tr>
    <tr><td class="paramname">obj</td><td>a pointer to an object being searched for </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
</div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated on Mon Sep 28 2015 14:46:53 for mydash by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.9.1
</small></address>
</body>
</html>
